# Optimized Dockerfile for Railway deployment
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies in one layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    poppler-utils \
    tesseract-ocr \
    tesseract-ocr-eng \
    libglib2.0-0 \
    libgomp1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy and install minimal Python dependencies first (for better caching)
COPY requirements.minimal.txt requirements.txt
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy backend files
COPY *.py ./

# Create necessary directories
RUN mkdir -p uploads processed cache data static

# Copy any pre-built frontend assets (if available)
COPY public/ ./static/ 2>/dev/null || echo "No public directory found, skipping..."

# Set environment variables
ENV FLASK_ENV=production
ENV PYTHONPATH=/app
ENV PORT=8080
ENV PYTHONUNBUFFERED=1

# Expose port
EXPOSE 8080

# Simplified health check
HEALTHCHECK --interval=60s --timeout=30s --start-period=10s --retries=2 \
    CMD curl -f http://localhost:8080/healthz || exit 1

# Run with gunicorn for better production performance
CMD ["gunicorn", "--bind", "0.0.0.0:8080", "--workers", "1", "--timeout", "120", "production_backend:app"]