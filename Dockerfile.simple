# Ultra-minimal standalone Dockerfile for Railway
FROM python:3.11-alpine

WORKDIR /app

# Install minimal system dependencies
RUN apk add --no-cache curl poppler-utils tesseract-ocr && \
    rm -rf /var/cache/apk/*

# Create minimal requirements inline to avoid file dependency issues
RUN echo "Flask==2.3.3" > requirements.txt && \
    echo "Flask-CORS==4.0.0" >> requirements.txt && \
    echo "google-genai==0.3.0" >> requirements.txt && \
    echo "Pillow==10.1.0" >> requirements.txt && \
    echo "PyMuPDF==1.23.14" >> requirements.txt && \
    echo "python-docx==1.1.0" >> requirements.txt && \
    echo "Werkzeug==2.3.7" >> requirements.txt && \
    echo "python-dotenv==1.0.0" >> requirements.txt && \
    echo "gunicorn==21.2.0" >> requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt && \
    pip cache purge && \
    rm requirements.txt

# Create app structure
RUN mkdir -p uploads processed static cache data

# Create minimal backend inline
RUN cat > app.py << 'EOF'
import os
import json
import uuid
from datetime import datetime
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from werkzeug.utils import secure_filename
try:
    from google import genai
    from PIL import Image
    import fitz
    import docx
except ImportError as e:
    print(f"Warning: {e}")

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024
CORS(app, origins=["*"])

GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-1.5-flash')
    except:
        model = None
else:
    model = None

@app.route('/healthz')
def health_check():
    return jsonify({'status': 'healthy', 'timestamp': datetime.now().isoformat()})

@app.route('/api/upload', methods=['POST'])
def upload_document():
    if 'file' not in request.files:
        return jsonify({'error': 'No file provided'}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No file selected'}), 400
    
    try:
        filename = secure_filename(file.filename)
        file_id = str(uuid.uuid4())
        file_path = os.path.join('uploads', f"{file_id}_{filename}")
        file.save(file_path)
        
        text_content = ""
        file_ext = filename.lower().split('.')[-1]
        
        if file_ext == 'pdf':
            try:
                doc = fitz.open(file_path)
                for page in doc:
                    text_content += page.get_text()
                doc.close()
            except:
                text_content = "PDF processing failed"
        elif file_ext in ['docx', 'doc']:
            try:
                doc = docx.Document(file_path)
                for paragraph in doc.paragraphs:
                    text_content += paragraph.text + "\n"
            except:
                text_content = "DOCX processing failed"
        elif file_ext == 'txt':
            with open(file_path, 'r', encoding='utf-8') as f:
                text_content = f.read()
        else:
            return jsonify({'error': 'Unsupported file type'}), 400
        
        if model and text_content.strip():
            try:
                prompt = f"Analyze this legal document: {text_content[:4000]}"
                response = model.generate_content(prompt)
                analysis = response.text
            except:
                analysis = "AI analysis unavailable"
        else:
            analysis = "Basic text extraction completed"
        
        result = {
            'file_id': file_id,
            'filename': filename,
            'analysis': analysis,
            'timestamp': datetime.now().isoformat()
        }
        
        return jsonify(result)
        
    except Exception as e:
        return jsonify({'error': f'Processing failed: {str(e)}'}), 500

@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def serve_app(path):
    if path.startswith('api/') or path == 'healthz':
        return jsonify({'error': 'Not found'}), 404
    return jsonify({
        'message': 'SimplyLegal API',
        'endpoints': ['/healthz', '/api/upload'],
        'status': 'running'
    })

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port, debug=False)
EOF

# Set environment variables
ENV FLASK_ENV=production \
    PORT=8080 \
    PYTHONUNBUFFERED=1

EXPOSE 8080

# Run the app
CMD ["python", "app.py"]